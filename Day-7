// 문자열 뒤집기
function solution(my_string) {
    let arr = my_string.split('');
    let arr2 = [];
    for(let i = my_string.length -1; i >= 0, i--;) {
        arr2.push(arr[i])
    }
    const arr1 = arr2.join('');
    return arr1;
}

//

function solution(my_string) {
    const arr = `${my_string}`;
    const arr1 = arr.split('').reverse().join('');
    return arr1;
}
// split('') 은 문자열의 문자들을 1개씩 분리하여 배열로만듬
// reverse 는 배열의 요소들의 순서를 역순으로 변경
// join('')은 배열의 요소들을 하나의 문자열로 합침

//특정 문자열 뒤집기
// function solution(my_string, letter) {
//     let arr = my_string.split('');
//     let arr2 = arr.includes(letter) ? arr.splice(arr.indexOf(letter,0),1) : arr2.push()
//     return arr2.join('');
// }

// //

// function solution(my_string, letter) {
//     let arr = my_string.split('');
//         arr.forEach(); {
//         if(arr.includes(letter))  {
//             arr.splice(arr.indexOf(letter,0),1)
//         }
//     }
//     return arr.join('');
// }

//

function solution(my_string, letter) {
    let answer = my_string.replaceAll(letter,''); //replace(a,b) 특정 문자열 a를 b 값으로 대체
    return answer;
}

//
function solution(my_string, letter) {
    const answer = my_string.split(letter).join('')
    return answer;
} // split 은 () 안의 구분자로 문자열을 분리하여 배열로 변환 하는 매서드

//문자 반복 출력하기

function solution(my_string, n) {
    return [...my_string].map(a => a.repeat(n)).join('')
}

// [...my_string]으로 문자열을 배열로 바꿔준뒤 a => a.repeat(n) 함수를 각각 요소에 적용한 새로운 배열을 만듦
// join('')으로 배열을 문자열로 다시 변환

//편지

function solution(message) {
    return (message.split('')).length*2
}

//모음 제거

function solution(my_string) {
    return my_string.split(/a|e|i|o|u/).join('');
}
// split(/문자|문자/) 로 여러개의 문자로 구분자를 사용할수있음

//문자열 안에 문자열

function solution(str1, str2) {
    return str1.split(str2).join('').length < str1.length ? 1 : 2
}
