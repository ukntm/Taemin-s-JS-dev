// 중복된 숫자 개수
function solution(array, n) {
    return array.filter(v => v === n).length
 }
 
//배열의 평균값
 function solution(numbers) {
    const init = 0;
    const sum = (numbers.reduce((acc,cur) => acc + cur,init))/numbers.length ;
    return sum;                 
}   // 배열.reduce 는 배열의 각 요소에 대해서 주어진 리듀서 함수를 실행하고 하나의 결과값을 반환
    // acc 가 누적값 cur 가 호출 값 , init = 0; 을 선언해주지않으면 1번인덱스부터시작
    
//짝수 홀수 개수
function solution(num_list) {
    let x = num_list.filter(even => even % 2 == 0).length
    let y = num_list.filter(odd => odd % 2 !== 0).length
    return [x,y];
}

//배열 자르기
function solution(numbers, num1, num2) {
    return numbers.slice(num1,num2+1)
}

//배열 원소의 길이
function solution(strlist) {
    return strlist.map(leng => leng.length);
}

//배열 뒤집기
function solution(num_list) {
    return num_list.reverse();
}

//최댓값 만들기
function solution(numbers) {
    numbers.sort((a,b) => b-a);
    return numbers[0]*numbers[1];
}

//compareFunction(a, b)이 0보다 작은 경우 a를 b보다 낮은 색인으로 정렬합니다. 즉, a가 먼저옵니다. 오름차순
// compareFunction(a, b)이 0보다 큰 경우, b를 a보다 낮은 인덱스로 소트합니다. 내림차순
