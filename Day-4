<html>
<head>
    <script>
    // 함수 //
        // 함수 선언
        function showMessage() {
            alert('안녕하세요')
        }
        showMessage() //안녕하세요
    // 지역 변수
        function showMessage1() {
            let message = "안녕하세요!"; // 지역 변수
                alert( message );
            }
        showMessage1() //'안녕하세요!'
        // alert(message) 출력 x message 가 함수 내 지역변수라 에러발생
    // 외부 변수 : 함수 내에선 외부 변수에 접근가능 함수로 변수 수정도 가능
            let userName = 'John'
            function user1() {
                userName = 'Bob'
            }
            user1()
            alert(userName) // 'Bob' 출력
    // 매개 변수 매개변수를 이용하면 임의의 데이터를 함수안에 전달가능
    // 매개변수는 parameter(인자) 라고도 말함
    function showMessage2(from, text) { // 인자: from, text
        alert(from + ': ' + text);
        }
        showMessage2('Ann', 'Hello'); // Ann: Hello
        showMessage2('Ann', "What's up?") //Ann: What's up?
    // 매개변수에 값을 전달하지 않아도 그 값이 undefined가 되지 않게 하려면 함수를 선언할 때 =를 사용해 기본값을 설정 해주면됨
    //ex) function showMessage(from, text = "no text given")
    // 반환값 : 함수를 호출했을 때 함수를 호출한 그곳에 특정 값을 반환
    function sum(a, b) {
        return a + b;
    }

    let result = sum(1, 2);
    alert( result ); // 3

    // ***함수 내부에서 외부 변수를 사용하는 방법 대신 지역 변수와 매개변수를 활용하는게 좋다***
    // 매개변수 없이 함수 내부에서 외부 변수를 수정해 반환 값을 만들어 내는 함수는 쉽게 이해하기 힘들다
    // 함수의 가독성을 높이는 쪽으로 코딩하는게 좋다!
    // 함수는 동작 하나만 담당 , 함수 이름을 지을때 접두어를 적절히 써야 어떤함수인지 알기가 쉽다 
    // 개발자들끼리 정해놓은(?) 암묵적인 룰 ? 같은거?

    // 함수 표현식
    // 함수도 값이기 때문에 변수에 할당할수있음
    function sayHi() {
        alert( "Hello" );
    }

    alert( sayHi ); // 함수 코드가 보임
    let func = sayHi;    // (2) 함수 복사

    // 콜백 함수

    function ask(question, yes, no) {
        if (confirm(question)) yes()
        else no();
    }   

    ask(
    "동의하십니까?",
    function() { alert("동의하셨습니다."); }, // 익명함수 하나가 변수처럼 작동
    function() { alert("취소 버튼을 누르셨습니다."); }
    );

    // 함수 표현식 vs 함수 선언문
    sayHi("John"); // Hello, John

    function sayHi(name) {
    alert( `Hello, ${name}` );
    }                                // 함수 선언문은 함수가 선언 되기전의 함수도 사용가능함 어디서든 접근가능

    sayHi("John"); // error!

    let sayHi = function(name) {  // (*) 마술은 일어나지 않습니다.
    alert( `Hello, ${name}` );
    };                               // 함수 표현식의 함수는 선언되기전의 함수는 작동 X
    // 선언문이 적당하지 않을때에만 표현식으로 사용

    // 화살표 함수
    let sum = (a, b) => a + b;

    /* 위 화살표 함수는 아래 함수의 축약 버전입니다.
    let sum = function(a, b) {
    return a + b;
    }; */
    
    // 나머지 매개변수 ...를 여분 매개변수를 담을 배열앞에 쓰면됨 항상 매개변수의 마지막에 있어야함
    function showName(firstName, lastName, ...titles) { // 여분의 매개변수를 담아서 할당 ...titles에 할당
    alert( firstName + ' ' + lastName ); // Bora Lee
    showName("Bora", "Lee", "Software Engineer", "Researcher");
    // 나머지 인수들은 배열 titles의 요소가 됩니다.
    // titles = ["Software Engineer", "Researcher"]
    alert( titles[0] ); // Software Engineer
    alert( titles[1] ); // Researcher
    alert( titles.length ); // 2
    }
    // 스프레드 문법
    alert( Math.max(3, 5, 1) ); // Math.max 는 인수로 받은 숫자중 가장 큰 숫자 반환 , 5
    // 함수를 호출할 때 ...arr를 사용하면, 이터러블 객체 arr이 인수 목록으로 '확장’됩니다
    let arr = [3, 5, 1];
    alert( Math.max(...arr) ); // 배열을 대상으로 Math.max 호출
    let arr1 = [1, -2, 3, 4];
    let arr2 = [8, 3, -8, 1];
    alert( Math.max(...arr1, ...arr2) ); // 이터러블 객체를 여러개 전달받을수도있음

    /*아래와 같이 이터러블 객체 여러 개를 전달하는 것도 가능합니다.
    let arr1 = [1, -2, 3, 4];
    let arr2 = [8, 3, -8, 1];
    alert( Math.max(...arr1, ...arr2) ); // 8
    스프레드 문법을 평범한 값과 혼합해 사용하는 것도 가능하죠.
    let arr1 = [1, -2, 3, 4];
    let arr2 = [8, 3, -8, 1];
    alert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25
    스프레드 문법은 배열을 합칠 때도 활용할 수 있습니다.
    let arr = [3, 5, 1];
    let arr2 = [8, 9, 15];
    let merged = [0, ...arr, 2, ...arr2];
    alert(merged); // 0,3,5,1,2,8,9,15 (0, arr, 2, arr2 순서로 합쳐집니다.) */

    </script>
</head>
<body>
    
</body>
</html>
