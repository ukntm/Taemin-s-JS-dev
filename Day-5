<html>
<head>
    <script>
        // 객체 //
        class Notebook {                            // Notebook 이라는 class를 선언
            constructor(name,price,company) {       // 생성자로 3개의 매개변수를 정의
                this.name = name                    
                this.price = price                  // class 호출시 전달할 매개변수를 프로퍼티(name,price,company)에 할당
                this.company = company
            }
        }

        const notebook1 = new Notebook('MacBook', 2000000, 'Apple') 
        // notebook1 이라는 객체에 매개변수 값을 할당
        alert(notebook1.name) //'MacBook' 출력

        class Product {
            constructor(name, price) {
                this.name = name
                this.price = price
            }
            printInfo () {                                         // 만들어진 객체안에 printInfo 라는 매소드 선언
                alert(`상품명: ${this.name},가격 ${this.price}원`)
            }
        }
        const notebook = new Product('Apple MacBook', 2000000)
        notebook.printInfo() // 객체 생성 및 매소드 호출 //
        // 상품명 : Apple MacBook, 가격 : 2000000원
    
        // 객체 리터럴

        // class 를 사용하지않고 빠르게 객체를 만들수있는 방법
        //ex)
        const computer = {
            name: 'Apple Macbook',
            price: 2000000, // 2개 이상의 속성과 메소드가 있을 때는 쉼표로 구별 가독성을 위해 줄바꿈 **
            printInfo: function() {
                alert(`상품명: ${this.name}, 가격: ${this.price}원 `)
            }
        }
        computer.printInfo() // 상품명 : Apple MacBook, 가격 : 2000000원
        // 함수와 마찬가지로 재사용성 때문에 객체를 사용해 간결한 코드작성!
        // user.["likes birds"] = true 객체에 프로퍼티 값을 만들때 "like birds" 처럼 여러 단어를 조합해 만든경우 대괄호를 사용

        // 계산된 프로퍼티

        let fruit = prompt("어떤 과일을 구매하시겠습니까?", "apple");
        let bag = {};
        // 변수 fruit을 사용해 프로퍼티 이름을 만들었습니다.
        bag[fruit] = 5;

        // 단축 프로퍼티
        function makeUser(name, age) {
        return {
            name, // name: name 과 같음
            age,  // age: age 와 같음
        // 프로퍼티 이름과 값이 변수와 동일할경우 name:name 대신 name만 적어주어도 프로퍼티 설정가능
        } ; 
        }
        // in 연산자로 프로퍼티 존재 여부 확인
        let user = { name: "John", age: 30 };

        alert( "age" in user ); // user.age가 존재 true 출력
        alert( "name" in user ); // user.name는 존재 true 출력
        alert( "blabla" in user ); // user.blabla는 존재하지 않기 때문에 false가 출력

        // for in 반목분
        let user1 = {
        name: "John",
        age: 30,
        isAdmin: true
        };

        for (let key in user1) {
         // key 는 user1 안에있는 모든 프로퍼티를 순회
        alert( key );  // name, age, isAdmin
         // 키에 해당하는 값
         alert( user1[key] ); // John, 30, true 객체 user1에 key 에 해당하는값을 출력
        }

        /* 객체 정렬 방식
        정수 프로퍼티는 자동으로 정렬되고 , 그외에 프로퍼티는 객체에 추가한 순서대로 정렬된다 */
        let codes = {
        "49": "독일",
        "41": "스위스",
        "44": "영국",
        // ..,
        "1": "미국"
        };

        for (let code in codes) {
        alert(code); // 1, 41, 44, 49
        // alert(codes[code]) // 독일, 스위스, 영국, 미국
        }
        
    </script>
</head>
<body>
    
</body>
</html>
